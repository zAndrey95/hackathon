/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace EntropyStructs {
  export type ProviderInfoStruct = {
    feeInWei: PromiseOrValue<BigNumberish>;
    accruedFeesInWei: PromiseOrValue<BigNumberish>;
    originalCommitment: PromiseOrValue<BytesLike>;
    originalCommitmentSequenceNumber: PromiseOrValue<BigNumberish>;
    commitmentMetadata: PromiseOrValue<BytesLike>;
    uri: PromiseOrValue<BytesLike>;
    endSequenceNumber: PromiseOrValue<BigNumberish>;
    sequenceNumber: PromiseOrValue<BigNumberish>;
    currentCommitment: PromiseOrValue<BytesLike>;
    currentCommitmentSequenceNumber: PromiseOrValue<BigNumberish>;
  };

  export type ProviderInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    feeInWei: BigNumber;
    accruedFeesInWei: BigNumber;
    originalCommitment: string;
    originalCommitmentSequenceNumber: BigNumber;
    commitmentMetadata: string;
    uri: string;
    endSequenceNumber: BigNumber;
    sequenceNumber: BigNumber;
    currentCommitment: string;
    currentCommitmentSequenceNumber: BigNumber;
  };

  export type RequestStruct = {
    provider: PromiseOrValue<string>;
    sequenceNumber: PromiseOrValue<BigNumberish>;
    numHashes: PromiseOrValue<BigNumberish>;
    commitment: PromiseOrValue<BytesLike>;
    blockNumber: PromiseOrValue<BigNumberish>;
    requester: PromiseOrValue<string>;
    useBlockhash: PromiseOrValue<boolean>;
  };

  export type RequestStructOutput = [
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    provider: string;
    sequenceNumber: BigNumber;
    numHashes: number;
    commitment: string;
    blockNumber: BigNumber;
    requester: string;
    useBlockhash: boolean;
  };
}

export interface EntropyEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Registered(tuple)": EventFragment;
    "Requested(tuple)": EventFragment;
    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
}

export interface RegisteredEventObject {
  provider: EntropyStructs.ProviderInfoStructOutput;
}
export type RegisteredEvent = TypedEvent<
  [EntropyStructs.ProviderInfoStructOutput],
  RegisteredEventObject
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface RequestedEventObject {
  request: EntropyStructs.RequestStructOutput;
}
export type RequestedEvent = TypedEvent<
  [EntropyStructs.RequestStructOutput],
  RequestedEventObject
>;

export type RequestedEventFilter = TypedEventFilter<RequestedEvent>;

export interface RevealedEventObject {
  request: EntropyStructs.RequestStructOutput;
  userRevelation: string;
  providerRevelation: string;
  blockHash: string;
  randomNumber: string;
}
export type RevealedEvent = TypedEvent<
  [EntropyStructs.RequestStructOutput, string, string, string, string],
  RevealedEventObject
>;

export type RevealedEventFilter = TypedEventFilter<RevealedEvent>;

export interface EntropyEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EntropyEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Registered(tuple)"(provider?: null): RegisteredEventFilter;
    Registered(provider?: null): RegisteredEventFilter;

    "Requested(tuple)"(request?: null): RequestedEventFilter;
    Requested(request?: null): RequestedEventFilter;

    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)"(
      request?: null,
      userRevelation?: null,
      providerRevelation?: null,
      blockHash?: null,
      randomNumber?: null
    ): RevealedEventFilter;
    Revealed(
      request?: null,
      userRevelation?: null,
      providerRevelation?: null,
      blockHash?: null,
      randomNumber?: null
    ): RevealedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
