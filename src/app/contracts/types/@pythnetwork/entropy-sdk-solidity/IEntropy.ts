/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace EntropyStructs {
  export type ProviderInfoStruct = {
    feeInWei: PromiseOrValue<BigNumberish>;
    accruedFeesInWei: PromiseOrValue<BigNumberish>;
    originalCommitment: PromiseOrValue<BytesLike>;
    originalCommitmentSequenceNumber: PromiseOrValue<BigNumberish>;
    commitmentMetadata: PromiseOrValue<BytesLike>;
    uri: PromiseOrValue<BytesLike>;
    endSequenceNumber: PromiseOrValue<BigNumberish>;
    sequenceNumber: PromiseOrValue<BigNumberish>;
    currentCommitment: PromiseOrValue<BytesLike>;
    currentCommitmentSequenceNumber: PromiseOrValue<BigNumberish>;
  };

  export type ProviderInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    feeInWei: BigNumber;
    accruedFeesInWei: BigNumber;
    originalCommitment: string;
    originalCommitmentSequenceNumber: BigNumber;
    commitmentMetadata: string;
    uri: string;
    endSequenceNumber: BigNumber;
    sequenceNumber: BigNumber;
    currentCommitment: string;
    currentCommitmentSequenceNumber: BigNumber;
  };

  export type RequestStruct = {
    provider: PromiseOrValue<string>;
    sequenceNumber: PromiseOrValue<BigNumberish>;
    numHashes: PromiseOrValue<BigNumberish>;
    commitment: PromiseOrValue<BytesLike>;
    blockNumber: PromiseOrValue<BigNumberish>;
    requester: PromiseOrValue<string>;
    useBlockhash: PromiseOrValue<boolean>;
  };

  export type RequestStructOutput = [
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    provider: string;
    sequenceNumber: BigNumber;
    numHashes: number;
    commitment: string;
    blockNumber: BigNumber;
    requester: string;
    useBlockhash: boolean;
  };
}

export interface IEntropyInterface extends utils.Interface {
  functions: {
    "combineRandomValues(bytes32,bytes32,bytes32)": FunctionFragment;
    "constructUserCommitment(bytes32)": FunctionFragment;
    "getAccruedPythFees()": FunctionFragment;
    "getDefaultProvider()": FunctionFragment;
    "getFee(address)": FunctionFragment;
    "getProviderInfo(address)": FunctionFragment;
    "getRequest(address,uint64)": FunctionFragment;
    "register(uint128,bytes32,bytes,uint64,bytes)": FunctionFragment;
    "request(address,bytes32,bool)": FunctionFragment;
    "reveal(address,uint64,bytes32,bytes32)": FunctionFragment;
    "withdraw(uint128)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "combineRandomValues"
      | "constructUserCommitment"
      | "getAccruedPythFees"
      | "getDefaultProvider"
      | "getFee"
      | "getProviderInfo"
      | "getRequest"
      | "register"
      | "request"
      | "reveal"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "combineRandomValues",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "constructUserCommitment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedPythFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProviderInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "combineRandomValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructUserCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedPythFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Registered(tuple)": EventFragment;
    "Requested(tuple)": EventFragment;
    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
}

export interface RegisteredEventObject {
  provider: EntropyStructs.ProviderInfoStructOutput;
}
export type RegisteredEvent = TypedEvent<
  [EntropyStructs.ProviderInfoStructOutput],
  RegisteredEventObject
>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface RequestedEventObject {
  request: EntropyStructs.RequestStructOutput;
}
export type RequestedEvent = TypedEvent<
  [EntropyStructs.RequestStructOutput],
  RequestedEventObject
>;

export type RequestedEventFilter = TypedEventFilter<RequestedEvent>;

export interface RevealedEventObject {
  request: EntropyStructs.RequestStructOutput;
  userRevelation: string;
  providerRevelation: string;
  blockHash: string;
  randomNumber: string;
}
export type RevealedEvent = TypedEvent<
  [EntropyStructs.RequestStructOutput, string, string, string, string],
  RevealedEventObject
>;

export type RevealedEventFilter = TypedEventFilter<RevealedEvent>;

export interface IEntropy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEntropyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    combineRandomValues(
      userRandomness: PromiseOrValue<BytesLike>,
      providerRandomness: PromiseOrValue<BytesLike>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { combinedRandomness: string }>;

    constructUserCommitment(
      userRandomness: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { userCommitment: string }>;

    getAccruedPythFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accruedPythFeesInWei: BigNumber }>;

    getDefaultProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { provider: string }>;

    getFee(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    getProviderInfo(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [EntropyStructs.ProviderInfoStructOutput] & {
        info: EntropyStructs.ProviderInfoStructOutput;
      }
    >;

    getRequest(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [EntropyStructs.RequestStructOutput] & {
        req: EntropyStructs.RequestStructOutput;
      }
    >;

    register(
      feeInWei: PromiseOrValue<BigNumberish>,
      commitment: PromiseOrValue<BytesLike>,
      commitmentMetadata: PromiseOrValue<BytesLike>,
      chainLength: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    request(
      provider: PromiseOrValue<string>,
      userCommitment: PromiseOrValue<BytesLike>,
      useBlockHash: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reveal(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandomness: PromiseOrValue<BytesLike>,
      providerRevelation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  combineRandomValues(
    userRandomness: PromiseOrValue<BytesLike>,
    providerRandomness: PromiseOrValue<BytesLike>,
    blockHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  constructUserCommitment(
    userRandomness: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

  getDefaultProvider(overrides?: CallOverrides): Promise<string>;

  getFee(
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderInfo(
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<EntropyStructs.ProviderInfoStructOutput>;

  getRequest(
    provider: PromiseOrValue<string>,
    sequenceNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EntropyStructs.RequestStructOutput>;

  register(
    feeInWei: PromiseOrValue<BigNumberish>,
    commitment: PromiseOrValue<BytesLike>,
    commitmentMetadata: PromiseOrValue<BytesLike>,
    chainLength: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  request(
    provider: PromiseOrValue<string>,
    userCommitment: PromiseOrValue<BytesLike>,
    useBlockHash: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reveal(
    provider: PromiseOrValue<string>,
    sequenceNumber: PromiseOrValue<BigNumberish>,
    userRandomness: PromiseOrValue<BytesLike>,
    providerRevelation: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    combineRandomValues(
      userRandomness: PromiseOrValue<BytesLike>,
      providerRandomness: PromiseOrValue<BytesLike>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    constructUserCommitment(
      userRandomness: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProvider(overrides?: CallOverrides): Promise<string>;

    getFee(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderInfo(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<EntropyStructs.ProviderInfoStructOutput>;

    getRequest(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EntropyStructs.RequestStructOutput>;

    register(
      feeInWei: PromiseOrValue<BigNumberish>,
      commitment: PromiseOrValue<BytesLike>,
      commitmentMetadata: PromiseOrValue<BytesLike>,
      chainLength: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    request(
      provider: PromiseOrValue<string>,
      userCommitment: PromiseOrValue<BytesLike>,
      useBlockHash: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reveal(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandomness: PromiseOrValue<BytesLike>,
      providerRevelation: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Registered(tuple)"(provider?: null): RegisteredEventFilter;
    Registered(provider?: null): RegisteredEventFilter;

    "Requested(tuple)"(request?: null): RequestedEventFilter;
    Requested(request?: null): RequestedEventFilter;

    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)"(
      request?: null,
      userRevelation?: null,
      providerRevelation?: null,
      blockHash?: null,
      randomNumber?: null
    ): RevealedEventFilter;
    Revealed(
      request?: null,
      userRevelation?: null,
      providerRevelation?: null,
      blockHash?: null,
      randomNumber?: null
    ): RevealedEventFilter;
  };

  estimateGas: {
    combineRandomValues(
      userRandomness: PromiseOrValue<BytesLike>,
      providerRandomness: PromiseOrValue<BytesLike>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constructUserCommitment(
      userRandomness: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderInfo(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequest(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      feeInWei: PromiseOrValue<BigNumberish>,
      commitment: PromiseOrValue<BytesLike>,
      commitmentMetadata: PromiseOrValue<BytesLike>,
      chainLength: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    request(
      provider: PromiseOrValue<string>,
      userCommitment: PromiseOrValue<BytesLike>,
      useBlockHash: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reveal(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandomness: PromiseOrValue<BytesLike>,
      providerRevelation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    combineRandomValues(
      userRandomness: PromiseOrValue<BytesLike>,
      providerRandomness: PromiseOrValue<BytesLike>,
      blockHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructUserCommitment(
      userRandomness: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccruedPythFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderInfo(
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequest(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      feeInWei: PromiseOrValue<BigNumberish>,
      commitment: PromiseOrValue<BytesLike>,
      commitmentMetadata: PromiseOrValue<BytesLike>,
      chainLength: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    request(
      provider: PromiseOrValue<string>,
      userCommitment: PromiseOrValue<BytesLike>,
      useBlockHash: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      provider: PromiseOrValue<string>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandomness: PromiseOrValue<BytesLike>,
      providerRevelation: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
