/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CardsAgainstHumanityInterface extends utils.Interface {
  functions: {
    "answersCollection()": FunctionFragment;
    "cancelGame(uint256)": FunctionFragment;
    "entropy()": FunctionFragment;
    "gamesCounter()": FunctionFragment;
    "getActionsCountForRound(uint256)": FunctionFragment;
    "getActiveGames()": FunctionFragment;
    "getGamePlayers(uint256)": FunctionFragment;
    "getGameResults(uint256)": FunctionFragment;
    "getGameStatus(uint256)": FunctionFragment;
    "getPlayerActiveGame(address)": FunctionFragment;
    "getPlayerAnswerCards(address,uint256)": FunctionFragment;
    "getPlayerBySelectedAnswer(uint256,uint64)": FunctionFragment;
    "getPlayerPreviousGame(address)": FunctionFragment;
    "getPlayerQuestionCard(address,uint256)": FunctionFragment;
    "getPlayerRoleInGame(address,uint256)": FunctionFragment;
    "getPlayerSelectedAnswer(address,uint256)": FunctionFragment;
    "getPlayerSequenceNumber(address)": FunctionFragment;
    "getRandomProviderFee()": FunctionFragment;
    "getSelectedAnswers(uint256)": FunctionFragment;
    "getUserStatus(address,uint256)": FunctionFragment;
    "isPlayer(address,uint256)": FunctionFragment;
    "joinGame(bytes32[5])": FunctionFragment;
    "maxPlayers()": FunctionFragment;
    "owner()": FunctionFragment;
    "playerReceivedCards(uint256,uint64,bytes32[5],bytes32)": FunctionFragment;
    "playerSendSelected(uint256,uint64)": FunctionFragment;
    "questionsCollection()": FunctionFragment;
    "randomProvider()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalAnswers()": FunctionFragment;
    "totalQuestions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userStats(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "answersCollection"
      | "cancelGame"
      | "entropy"
      | "gamesCounter"
      | "getActionsCountForRound"
      | "getActiveGames"
      | "getGamePlayers"
      | "getGameResults"
      | "getGameStatus"
      | "getPlayerActiveGame"
      | "getPlayerAnswerCards"
      | "getPlayerBySelectedAnswer"
      | "getPlayerPreviousGame"
      | "getPlayerQuestionCard"
      | "getPlayerRoleInGame"
      | "getPlayerSelectedAnswer"
      | "getPlayerSequenceNumber"
      | "getRandomProviderFee"
      | "getSelectedAnswers"
      | "getUserStatus"
      | "isPlayer"
      | "joinGame"
      | "maxPlayers"
      | "owner"
      | "playerReceivedCards"
      | "playerSendSelected"
      | "questionsCollection"
      | "randomProvider"
      | "renounceOwnership"
      | "totalAnswers"
      | "totalQuestions"
      | "transferOwnership"
      | "userStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "answersCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGame",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "entropy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gamesCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionsCountForRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGamePlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameResults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerActiveGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerAnswerCards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerBySelectedAnswer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPreviousGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerQuestionCard",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRoleInGame",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerSelectedAnswer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerSequenceNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomProviderFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectedAnswers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerReceivedCards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "playerSendSelected",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "questionsCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQuestions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "answersCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entropy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionsCountForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGamePlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerActiveGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerAnswerCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerBySelectedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPreviousGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerQuestionCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRoleInGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerSelectedAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomProviderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectedAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerReceivedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerSendSelected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "questionsCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;

  events: {
    "GameCanceledByOwner(uint256)": EventFragment;
    "GameCreated(uint256)": EventFragment;
    "JudgeSelected(uint256,address)": EventFragment;
    "JudgeSelectedWinner(uint256,address,uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerJoined(uint256,address)": EventFragment;
    "PlayerReceivedCards(uint256,address)": EventFragment;
    "PlayerSubmitAnswer(uint256,address,uint64)": EventFragment;
    "UserRandomRequstested(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameCanceledByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JudgeSelected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JudgeSelectedWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerReceivedCards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerSubmitAnswer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRandomRequstested"): EventFragment;
}

export interface GameCanceledByOwnerEventObject {
  gameId: BigNumber;
}
export type GameCanceledByOwnerEvent = TypedEvent<
  [BigNumber],
  GameCanceledByOwnerEventObject
>;

export type GameCanceledByOwnerEventFilter =
  TypedEventFilter<GameCanceledByOwnerEvent>;

export interface GameCreatedEventObject {
  gameId: BigNumber;
}
export type GameCreatedEvent = TypedEvent<[BigNumber], GameCreatedEventObject>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export interface JudgeSelectedEventObject {
  gameId: BigNumber;
  judge: string;
}
export type JudgeSelectedEvent = TypedEvent<
  [BigNumber, string],
  JudgeSelectedEventObject
>;

export type JudgeSelectedEventFilter = TypedEventFilter<JudgeSelectedEvent>;

export interface JudgeSelectedWinnerEventObject {
  gameId: BigNumber;
  winner: string;
  answer: BigNumber;
}
export type JudgeSelectedWinnerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  JudgeSelectedWinnerEventObject
>;

export type JudgeSelectedWinnerEventFilter =
  TypedEventFilter<JudgeSelectedWinnerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlayerJoinedEventObject {
  gameId: BigNumber;
  player: string;
}
export type PlayerJoinedEvent = TypedEvent<
  [BigNumber, string],
  PlayerJoinedEventObject
>;

export type PlayerJoinedEventFilter = TypedEventFilter<PlayerJoinedEvent>;

export interface PlayerReceivedCardsEventObject {
  gameId: BigNumber;
  player: string;
}
export type PlayerReceivedCardsEvent = TypedEvent<
  [BigNumber, string],
  PlayerReceivedCardsEventObject
>;

export type PlayerReceivedCardsEventFilter =
  TypedEventFilter<PlayerReceivedCardsEvent>;

export interface PlayerSubmitAnswerEventObject {
  gameId: BigNumber;
  player: string;
  answer: BigNumber;
}
export type PlayerSubmitAnswerEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  PlayerSubmitAnswerEventObject
>;

export type PlayerSubmitAnswerEventFilter =
  TypedEventFilter<PlayerSubmitAnswerEvent>;

export interface UserRandomRequstestedEventObject {
  gameId: BigNumber;
  player: string;
}
export type UserRandomRequstestedEvent = TypedEvent<
  [BigNumber, string],
  UserRandomRequstestedEventObject
>;

export type UserRandomRequstestedEventFilter =
  TypedEventFilter<UserRandomRequstestedEvent>;

export interface CardsAgainstHumanity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CardsAgainstHumanityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    answersCollection(overrides?: CallOverrides): Promise<[string]>;

    cancelGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entropy(overrides?: CallOverrides): Promise<[string]>;

    gamesCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActionsCountForRound(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getActiveGames(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getGamePlayers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getGameResults(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        winner: string;
        winningAnswer: BigNumber;
        question: BigNumber;
      }
    >;

    getGameStatus(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPlayerActiveGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerAnswerCards(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlayerBySelectedAnswer(
      gameId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayerPreviousGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerQuestionCard(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerRoleInGame(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPlayerSelectedAnswer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerSequenceNumber(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRandomProviderFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSelectedAnswers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserStatus(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isPlayer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinGame(
      _commitments: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxPlayers(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerReceivedCards(
      gameId: PromiseOrValue<BigNumberish>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandoms: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      providerRandom: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerSendSelected(
      gameId: PromiseOrValue<BigNumberish>,
      card: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    questionsCollection(overrides?: CallOverrides): Promise<[string]>;

    randomProvider(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalAnswers(overrides?: CallOverrides): Promise<[number]>;

    totalQuestions(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }
    >;
  };

  answersCollection(overrides?: CallOverrides): Promise<string>;

  cancelGame(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entropy(overrides?: CallOverrides): Promise<string>;

  gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getActionsCountForRound(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getActiveGames(overrides?: CallOverrides): Promise<BigNumber[]>;

  getGamePlayers(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getGameResults(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      winner: string;
      winningAnswer: BigNumber;
      question: BigNumber;
    }
  >;

  getGameStatus(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPlayerActiveGame(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerAnswerCards(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlayerBySelectedAnswer(
    gameId: PromiseOrValue<BigNumberish>,
    answer: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerPreviousGame(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerQuestionCard(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerRoleInGame(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPlayerSelectedAnswer(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerSequenceNumber(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRandomProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSelectedAnswers(
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserStatus(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  isPlayer(
    player: PromiseOrValue<string>,
    gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinGame(
    _commitments: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxPlayers(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerReceivedCards(
    gameId: PromiseOrValue<BigNumberish>,
    sequenceNumber: PromiseOrValue<BigNumberish>,
    userRandoms: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    providerRandom: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerSendSelected(
    gameId: PromiseOrValue<BigNumberish>,
    card: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  questionsCollection(overrides?: CallOverrides): Promise<string>;

  randomProvider(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalAnswers(overrides?: CallOverrides): Promise<number>;

  totalQuestions(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStats(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }>;

  callStatic: {
    answersCollection(overrides?: CallOverrides): Promise<string>;

    cancelGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    entropy(overrides?: CallOverrides): Promise<string>;

    gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getActionsCountForRound(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getActiveGames(overrides?: CallOverrides): Promise<BigNumber[]>;

    getGamePlayers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getGameResults(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        winner: string;
        winningAnswer: BigNumber;
        question: BigNumber;
      }
    >;

    getGameStatus(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPlayerActiveGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerAnswerCards(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlayerBySelectedAnswer(
      gameId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerPreviousGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerQuestionCard(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerRoleInGame(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPlayerSelectedAnswer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerSequenceNumber(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSelectedAnswers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserStatus(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    isPlayer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinGame(
      _commitments: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    maxPlayers(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerReceivedCards(
      gameId: PromiseOrValue<BigNumberish>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandoms: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      providerRandom: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    playerSendSelected(
      gameId: PromiseOrValue<BigNumberish>,
      card: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    questionsCollection(overrides?: CallOverrides): Promise<string>;

    randomProvider(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalAnswers(overrides?: CallOverrides): Promise<number>;

    totalQuestions(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }
    >;
  };

  filters: {
    "GameCanceledByOwner(uint256)"(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCanceledByOwnerEventFilter;
    GameCanceledByOwner(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCanceledByOwnerEventFilter;

    "GameCreated(uint256)"(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCreatedEventFilter;
    GameCreated(
      gameId?: PromiseOrValue<BigNumberish> | null
    ): GameCreatedEventFilter;

    "JudgeSelected(uint256,address)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      judge?: PromiseOrValue<string> | null
    ): JudgeSelectedEventFilter;
    JudgeSelected(
      gameId?: PromiseOrValue<BigNumberish> | null,
      judge?: PromiseOrValue<string> | null
    ): JudgeSelectedEventFilter;

    "JudgeSelectedWinner(uint256,address,uint64)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      answer?: null
    ): JudgeSelectedWinnerEventFilter;
    JudgeSelectedWinner(
      gameId?: PromiseOrValue<BigNumberish> | null,
      winner?: PromiseOrValue<string> | null,
      answer?: null
    ): JudgeSelectedWinnerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlayerJoined(uint256,address)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): PlayerJoinedEventFilter;
    PlayerJoined(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): PlayerJoinedEventFilter;

    "PlayerReceivedCards(uint256,address)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): PlayerReceivedCardsEventFilter;
    PlayerReceivedCards(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): PlayerReceivedCardsEventFilter;

    "PlayerSubmitAnswer(uint256,address,uint64)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      answer?: null
    ): PlayerSubmitAnswerEventFilter;
    PlayerSubmitAnswer(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null,
      answer?: null
    ): PlayerSubmitAnswerEventFilter;

    "UserRandomRequstested(uint256,address)"(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): UserRandomRequstestedEventFilter;
    UserRandomRequstested(
      gameId?: PromiseOrValue<BigNumberish> | null,
      player?: PromiseOrValue<string> | null
    ): UserRandomRequstestedEventFilter;
  };

  estimateGas: {
    answersCollection(overrides?: CallOverrides): Promise<BigNumber>;

    cancelGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entropy(overrides?: CallOverrides): Promise<BigNumber>;

    gamesCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getActionsCountForRound(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveGames(overrides?: CallOverrides): Promise<BigNumber>;

    getGamePlayers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameResults(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameStatus(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerActiveGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerAnswerCards(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerBySelectedAnswer(
      gameId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerPreviousGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerQuestionCard(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerRoleInGame(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerSelectedAnswer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerSequenceNumber(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomProviderFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSelectedAnswers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStatus(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPlayer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinGame(
      _commitments: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerReceivedCards(
      gameId: PromiseOrValue<BigNumberish>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandoms: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      providerRandom: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerSendSelected(
      gameId: PromiseOrValue<BigNumberish>,
      card: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    questionsCollection(overrides?: CallOverrides): Promise<BigNumber>;

    randomProvider(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    totalQuestions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    answersCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelGame(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entropy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gamesCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActionsCountForRound(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGamePlayers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameResults(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameStatus(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerActiveGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerAnswerCards(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerBySelectedAnswer(
      gameId: PromiseOrValue<BigNumberish>,
      answer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerPreviousGame(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerQuestionCard(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerRoleInGame(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerSelectedAnswer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerSequenceNumber(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomProviderFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelectedAnswers(
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStatus(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayer(
      player: PromiseOrValue<string>,
      gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      _commitments: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerReceivedCards(
      gameId: PromiseOrValue<BigNumberish>,
      sequenceNumber: PromiseOrValue<BigNumberish>,
      userRandoms: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      providerRandom: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerSendSelected(
      gameId: PromiseOrValue<BigNumberish>,
      card: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    questionsCollection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalQuestions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
