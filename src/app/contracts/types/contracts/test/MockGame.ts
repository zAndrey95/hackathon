/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MockGame {
  export type UserStatsStruct = {
    games: PromiseOrValue<BigNumberish>;
    winner: PromiseOrValue<BigNumberish>;
  };

  export type UserStatsStructOutput = [BigNumber, BigNumber] & {
    games: BigNumber;
    winner: BigNumber;
  };
}

export interface MockGameInterface extends utils.Interface {
  functions: {
    "setMockStats(address,(uint256,uint256))": FunctionFragment;
    "stats(address)": FunctionFragment;
    "userStats(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "setMockStats" | "stats" | "userStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setMockStats",
    values: [PromiseOrValue<string>, MockGame.UserStatsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStats",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setMockStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStats", data: BytesLike): Result;

  events: {};
}

export interface MockGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setMockStats(
      user: PromiseOrValue<string>,
      data: MockGame.UserStatsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }
    >;

    userStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MockGame.UserStatsStructOutput]>;
  };

  setMockStats(
    user: PromiseOrValue<string>,
    data: MockGame.UserStatsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stats(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }>;

  userStats(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MockGame.UserStatsStructOutput>;

  callStatic: {
    setMockStats(
      user: PromiseOrValue<string>,
      data: MockGame.UserStatsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { games: BigNumber; winner: BigNumber }
    >;

    userStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MockGame.UserStatsStructOutput>;
  };

  filters: {};

  estimateGas: {
    setMockStats(
      user: PromiseOrValue<string>,
      data: MockGame.UserStatsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setMockStats(
      user: PromiseOrValue<string>,
      data: MockGame.UserStatsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stats(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
