/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockCollection,
  MockCollectionInterface,
} from "../../../contracts/test/MockCollection";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_totalSupply",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161022a38038061022a83398101604081905261002f91610054565b600080546001600160401b0319166001600160401b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160401b038116811461007d57600080fd5b9392505050565b610197806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806318160ddd1461003b578063d85d3d271461006d575b600080fd5b60005461004f9067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b61008c61007b3660046100b0565b5060005467ffffffffffffffff1690565b604051908152602001610064565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100c257600080fd5b813567ffffffffffffffff808211156100da57600080fd5b818401915084601f8301126100ee57600080fd5b8135818111156101005761010061009a565b604051601f8201601f19908116603f011681019083821181831017156101285761012861009a565b8160405282815287602084870101111561014157600080fd5b82602086016020830137600092810160200192909252509594505050505056fea26469706673582212202ddc29580e5e55aa6f9af4d0251dc9ea624d81116841c7912ecf92102dfe5a5264736f6c63430008170033";

type MockCollectionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCollectionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCollection__factory extends ContractFactory {
  constructor(...args: MockCollectionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockCollection> {
    return super.deploy(
      _totalSupply,
      overrides || {}
    ) as Promise<MockCollection>;
  }
  override getDeployTransaction(
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_totalSupply, overrides || {});
  }
  override attach(address: string): MockCollection {
    return super.attach(address) as MockCollection;
  }
  override connect(signer: Signer): MockCollection__factory {
    return super.connect(signer) as MockCollection__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCollectionInterface {
    return new utils.Interface(_abi) as MockCollectionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCollection {
    return new Contract(address, _abi, signerOrProvider) as MockCollection;
  }
}
