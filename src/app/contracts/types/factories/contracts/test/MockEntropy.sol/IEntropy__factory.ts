/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEntropy,
  IEntropyInterface,
} from "../../../../contracts/test/MockEntropy.sol/IEntropy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint128",
        name: "feeAmount",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "userCommitment",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "useBlockHash",
        type: "bool",
      },
    ],
    name: "request",
    outputs: [
      {
        internalType: "uint64",
        name: "assignedSequenceNumber",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "userRandomness",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "providerRevelation",
        type: "bytes32",
      },
    ],
    name: "reveal",
    outputs: [
      {
        internalType: "bytes32",
        name: "randomNumber",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEntropy__factory {
  static readonly abi = _abi;
  static createInterface(): IEntropyInterface {
    return new utils.Interface(_abi) as IEntropyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEntropy {
    return new Contract(address, _abi, signerOrProvider) as IEntropy;
  }
}
