/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockEntropy,
  MockEntropyInterface,
} from "../../../../contracts/test/MockEntropy.sol/MockEntropy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "feeInWei",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint128",
        name: "feeAmount",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "userCommitment",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "useBlockHash",
        type: "bool",
      },
    ],
    name: "request",
    outputs: [
      {
        internalType: "uint64",
        name: "assignedSequenceNumber",
        type: "uint64",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "userRandomness",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "providerRevelation",
        type: "bytes32",
      },
    ],
    name: "reveal",
    outputs: [
      {
        internalType: "bytes32",
        name: "randomNumber",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sequenceNumberCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260008055600180546001600160801b031916662386f26fc1000017905534801561002d57600080fd5b506102bc8061003d6000396000f3fe60806040526004361061004a5760003560e01c80633e16a2701461004f5780638fd727dc1461008c5780639371df51146100b057806393cbf21714610110578063b88c91481461013c575b600080fd5b34801561005b57600080fd5b5060015461006f906001600160801b031681565b6040516001600160801b0390911681526020015b60405180910390f35b34801561009857600080fd5b506100a260005481565b604051908152602001610083565b3480156100bc57600080fd5b506100a26100cb3660046101a7565b604080516020808201949094528082019290925260c09390931b6001600160c01b03191660608201528251604881830301815260689091019092528151910120919050565b61012361011e3660046101f8565b610167565b60405167ffffffffffffffff9091168152602001610083565b34801561014857600080fd5b5061006f61015736600461023d565b506001546001600160801b031690565b6000600160008082825461017b919061025f565b9091555050600054949350505050565b80356001600160a01b03811681146101a257600080fd5b919050565b600080600080608085870312156101bd57600080fd5b6101c68561018b565b9350602085013567ffffffffffffffff811681146101e357600080fd5b93969395505050506040820135916060013590565b60008060006060848603121561020d57600080fd5b6102168461018b565b9250602084013591506040840135801515811461023257600080fd5b809150509250925092565b60006020828403121561024f57600080fd5b6102588261018b565b9392505050565b8082018082111561028057634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122060e29dd35caa04e86aa319c29ee0a7701b5a85c873bd6b6798e55efce334e6ba64736f6c63430008170033";

type MockEntropyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockEntropyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockEntropy__factory extends ContractFactory {
  constructor(...args: MockEntropyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockEntropy> {
    return super.deploy(overrides || {}) as Promise<MockEntropy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockEntropy {
    return super.attach(address) as MockEntropy;
  }
  override connect(signer: Signer): MockEntropy__factory {
    return super.connect(signer) as MockEntropy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockEntropyInterface {
    return new utils.Interface(_abi) as MockEntropyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockEntropy {
    return new Contract(address, _abi, signerOrProvider) as MockEntropy;
  }
}
